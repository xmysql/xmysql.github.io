<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charles Blog</title>
  
  <subtitle>DBA MySQL Oracle Python</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xmysql.com/"/>
  <updated>2020-06-03T07:13:48.264Z</updated>
  <id>https://blog.xmysql.com/</id>
  
  <author>
    <name>Charles Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python数学模块、数学函数和数学常量</title>
    <link href="https://blog.xmysql.com/20200603/Python%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9D%97%E3%80%81%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0%E5%92%8C%E6%95%B0%E5%AD%A6%E5%B8%B8%E9%87%8F.html"/>
    <id>https://blog.xmysql.com/20200603/Python数学模块、数学函数和数学常量.html</id>
    <published>2020-06-03T07:12:52.000Z</published>
    <updated>2020-06-03T07:13:48.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python数学模块、数学函数和数学常量"><a href="#Python数学模块、数学函数和数学常量" class="headerlink" title="Python数学模块、数学函数和数学常量"></a>Python数学模块、数学函数和数学常量</h2><ul><li><p>数学模块</p><ol><li>math模块：提供浮点数的数学运算函数。</li><li>cmath模块：提供复数运算的函数。</li></ol></li><li><p>数学函数</p><ol><li><p>数学函数</p></li><li><p>随机数函数：随机数用于数学、游戏、在安全领域中提高程序的安全性，还经常嵌入算法中提高算法的效率。</p></li><li><p>三角函数</p></li></ol></li><li><p>数学常量</p></li></ul><ul><li><p>数学模块</p><ol><li><p>math模块</p><p>提供浮点数的数学运算函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(dir(math))</span><br><span class="line"><span class="comment"># ['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>cmath模块</p><p>提供复数运算的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cmath</span><br><span class="line">print(dir(cmath))</span><br><span class="line"><span class="comment"># ['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cos', 'cosh', 'e', 'exp', 'inf', 'infj', 'isclose', 'isfinite', 'isinf', 'isnan', 'log', 'log10', 'nan', 'nanj', 'phase', 'pi', 'polar', 'rect', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau']</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>数学函数</p><ol><li><p>数学函数</p><table><thead><tr><th align="left">函数</th><th align="left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td align="left">abs(x)</td><td align="left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td align="left">ceil(x)</td><td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td align="left">cmp(x, y)</td><td align="left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1</td></tr><tr><td align="left">exp(x)</td><td align="left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td align="left">fabs(x)</td><td align="left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td align="left">floor(x)</td><td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td align="left">log(x)</td><td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td align="left">log10(x)</td><td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td align="left">max(x1, x2,…)</td><td align="left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td align="left">min(x1, x2,…)</td><td align="left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td align="left">modf(x)</td><td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td align="left">pow(x, y)</td><td align="left">x**y 运算后的值。</td></tr><tr><td align="left">round(x [,n])</td><td align="left">返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td></tr><tr><td align="left">sqrt(x)</td><td align="left">返回数字x的平方根</td></tr></tbody></table></li><li><p>随机数函数</p><p>随机数用于数学、游戏、在安全领域中提高程序的安全性，还经常嵌入算法中提高算法的效率。</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">choice(seq)</td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left">randrange ([start,] stop [,step])</td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left">random()</td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">seed([x])</td><td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td align="left">shuffle(lst)</td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left">uniform(x, y)</td><td align="left">随机生成下一个实数，它在[x,y]范围内</td></tr></tbody></table></li><li><p>三角函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>acos(x)</td><td>返回x的反余弦弧度值。</td></tr><tr><td>asin(x)</td><td>返回x的反正弦弧度值。</td></tr><tr><td>atan(x)</td><td>返回x的反正切弧度值。</td></tr><tr><td>atan2(y, x)</td><td>返回给定的 X 及 Y 坐标值的反正切值。</td></tr><tr><td>cos(x)</td><td>返回x的弧度的余弦值。</td></tr><tr><td>hypot(x, y)</td><td>返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td></tr><tr><td>sin(x)</td><td>返回的x弧度的正弦值。</td></tr><tr><td>tan(x)</td><td>返回x弧度的正切值。</td></tr><tr><td>degrees(x)</td><td>将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td></tr><tr><td>radians(x)</td><td>将角度转换为弧度</td></tr></tbody></table></li></ol></li><li><p>数学常量</p><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pi</td><td align="left">数学常量 pi（圆周率，一般以π来表示）</td></tr><tr><td align="left">e</td><td align="left">数学常量 e，e即自然常数（自然常数）。</td></tr></tbody></table></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python数学模块、数学函数和数学常量&quot;&gt;&lt;a href=&quot;#Python数学模块、数学函数和数学常量&quot; class=&quot;headerlink&quot; title=&quot;Python数学模块、数学函数和数学常量&quot;&gt;&lt;/a&gt;Python数学模块、数学函数和数学常量&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础数据类型之数字类型</title>
    <link href="https://blog.xmysql.com/20200603/Python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B.html"/>
    <id>https://blog.xmysql.com/20200603/Python基础数据类型之数字类型.html</id>
    <published>2020-06-03T03:21:17.000Z</published>
    <updated>2020-06-03T03:39:00.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python基础数据类型之数字类型"><a href="#Python基础数据类型之数字类型" class="headerlink" title="Python基础数据类型之数字类型"></a>Python基础数据类型之数字类型</h2><p>Python 2.x的整数类型区分int和long。</p><p>Python 3.x不再区分int和long，统一使用int。</p><p>数字类型分为：</p><ol><li><code>int</code>整数类型</li><li><code>float</code>浮点型</li><li><code>complex</code>复数类型</li></ol><ol><li><p><code>int</code>整数类型</p><p>在32位机器上，整数的位数为32位，取值范围为<code>-2**31～2**31-1</code>，即<code>-2147483648～2147483647</code></p><p>在64位系统上，整数的位数为64位，取值范围为<code>-2**63～2**63-1</code>，即<code>-9223372036854775808～9223372036854775807</code></p></li></ol><p>   Python 2.x的数字类型区分<code>int</code>整型和<code>long</code>长整型</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 2.7</span></span><br><span class="line">i = <span class="number">10</span>  </span><br><span class="line">print(type(i))</span><br><span class="line"><span class="comment"># &lt;type 'int'&gt;  </span></span><br><span class="line">  </span><br><span class="line">i=<span class="number">10000000000</span>  </span><br><span class="line">print(type(i))</span><br><span class="line"><span class="comment"># &lt;type 'long'&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><code>float</code>浮点型</p><p>浮点数，带小数点的数，精度与机器有关。</p></li></ol><p>   浮点数示例：</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">12.12</span></span><br><span class="line">print(type(f))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;class 'float'&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>浮点数精度问题</p><p>为什么所有支持浮点数运算的编程语言会遇到浮点数精度问题？</p><p>真正原因在于十进制数与二进制数转换的时候导致的。</p><p>计算机其实不认识十进制数，它只认识二进制数，当以十进制数进行运算时，计算机需要将使十进制数转换成二进制数，然后进行二进制间的计算。</p></li></ul><pre><code>+ 十进制小数转换成二进制数  + 0.1转换成二进制数示例：    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0.1*2=0.2 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.2*2=0.4 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.4*2=0.8 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.8*2=1.6 --&gt; 取出整数部分1</span><br><span class="line"></span><br><span class="line">0.6*2=1.2 --&gt; 取出整数部分1</span><br><span class="line"></span><br><span class="line">0.2*2=0.4 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.4*2=0.8 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.8*2=1.6 --&gt; 取出整数部分1</span><br><span class="line"></span><br><span class="line">0.6*2=1.2 --&gt; 取出整数部分1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来会无限循环</span></span><br><span class="line"></span><br><span class="line">0.2*2=0.4 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.4*2=0.8 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.8*2=1.6 --&gt; 取出整数部分1</span><br><span class="line"></span><br><span class="line">0.6*2=1.2 --&gt; 取出整数部分1</span><br></pre></td></tr></table></figure>  + 转换成二进制数的结果    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.00011</span> <span class="number">0011.</span>.<span class="number">.0011</span>..<span class="number">.0011</span>...</span><br></pre></td></tr></table></figure>  0.1转换成二进制数的结果是无限循环，0.1转换成二进制数后，无法精确到等于十进制数的0.1。由于计算机的存储位数有限制，所以需要存储的二进制位数超过计算机存储位数的最大值，后续的位数会被舍弃，舍弃的原则是“0舍1入”。+ **十进制小数转换成二进制小数的计算方法：**用“乘2取整，顺序排列”法。  用2乘十进制小数，可以得到积，将积的整数部分取出，再用2乘余下的小数部分，又得到一个积，再将积的整数部分取出，以此类推，直到积中的小数部分为零，此时0或1为二进制的最后一位。或者达到所要求的精度为止。然后把取出的整数部分按顺序排列起来，先取的整数作为二进制小数的高位有效位，后取的整数作为低位有效位。  + 0.3转换成二进制数示例：    <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">0.3*2=0.6 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.6*2=1.2 --&gt; 取出整数部分1</span><br><span class="line"></span><br><span class="line">0.2*2=0.4 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.4*2=0.8 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.8*2=1.6 --&gt; 取出整数部分1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来会无限循环</span></span><br><span class="line"></span><br><span class="line">0.6*2=1.2 --&gt; 取出整数部分1</span><br><span class="line"></span><br><span class="line">0.2*2=0.4 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.4*2=0.8 --&gt; 取出整数部分0</span><br><span class="line"></span><br><span class="line">0.8*2=1.6 --&gt; 取出整数部分1</span><br></pre></td></tr></table></figure>  + 转换成二进制数的结果    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.01001</span>..<span class="number">.1001</span>..<span class="number">.1001</span>...</span><br></pre></td></tr></table></figure>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="number">0.1</span></span><br><span class="line">f2 = <span class="number">0.2</span></span><br><span class="line">print(f1+f2)</span><br><span class="line"><span class="comment"># 0.30000000000000004</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="number">11.11</span></span><br><span class="line">f3 = <span class="number">12.12</span></span><br><span class="line">print(f2+f3)</span><br><span class="line"><span class="comment"># 23.229999999999997</span></span><br><span class="line"></span><br><span class="line">f4 = <span class="number">10</span></span><br><span class="line">f5 = <span class="number">3</span></span><br><span class="line">print(f4/f5)</span><br><span class="line"><span class="comment"># 3.3333333333333335</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>提供高浮点数精度</p><ol><li><p>使用decimal模块，得到更精确的结果。</p><p>decimal模块实现的十进制数运算适合会计方面的应用和有高精度要求的应用。</p></li><li><p>使用fractions模块的Fraction函数</p><p>如果decimal模块还是满足不了精度的要求，可以使用fractions模块。</p></li></ol></li></ul><pre><code>1. 使用decimal模块   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line">f1 = decimal.Decimal(<span class="string">"0.1"</span>)</span><br><span class="line">f2 = decimal.Decimal(<span class="string">"0.2"</span>)</span><br><span class="line">print(f1+f2)</span><br><span class="line"><span class="comment"># 0.3</span></span><br><span class="line"></span><br><span class="line">f1 = decimal.Decimal(<span class="string">"11.11"</span>)</span><br><span class="line">f2 = decimal.Decimal(<span class="string">"12.12"</span>)</span><br><span class="line">print(f1+f2)</span><br><span class="line"><span class="comment"># 23.23</span></span><br><span class="line"></span><br><span class="line">f3 = decimal.Decimal(<span class="string">"10.0"</span>)</span><br><span class="line">f4 = decimal.Decimal(<span class="string">"3"</span>)</span><br><span class="line">print(f3/f4)</span><br><span class="line"><span class="comment"># 3.333333333333333333333333333</span></span><br></pre></td></tr></table></figure>2. 使用fractions模块的Fraction函数   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line">print(Fraction(<span class="number">10</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 10/3</span></span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li><code>complex</code>复数类型</li></ol><p><strong><em>未完待续 ……</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python基础数据类型之数字类型&quot;&gt;&lt;a href=&quot;#Python基础数据类型之数字类型&quot; class=&quot;headerlink&quot; title=&quot;Python基础数据类型之数字类型&quot;&gt;&lt;/a&gt;Python基础数据类型之数字类型&lt;/h2&gt;&lt;p&gt;Python 2.x
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python数据类型介绍</title>
    <link href="https://blog.xmysql.com/20200602/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D.html"/>
    <id>https://blog.xmysql.com/20200602/Python数据类型介绍.html</id>
    <published>2020-06-02T08:47:33.000Z</published>
    <updated>2020-06-02T08:59:57.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python数据类型介绍"><a href="#Python数据类型介绍" class="headerlink" title="Python数据类型介绍"></a>Python数据类型介绍</h2><p>数据类型是为了让计算机能够区分、识别和处理各种数据。每种编程语言都有数据类型，对常用的各种数据类型进行明确划分。</p><p>Python数据类型的分类：</p><ul><li><p>Python五种标准数据类型：<br><font color=red><code>number</code>数字、<code>str</code>字符串、<code>list</code>列表、<code>dic</code>字典、<code>tuple</code>元组</font>。</p></li><li><p>Python基础数据类型（内置数据类型）：<br><font color=red><code>number</code>数字、<code>bool</code>布尔值、<code>None</code>空值、<code>dic</code>字典、<code>str</code>字符串、<code>list</code>列表、<code>tuple</code>元组、<code>set</code>集合、<code>frozenset</code>冻结的集合、字节<code>bytes</code>、<code>bytearray</code>字节数组</font>。</p></li><li><p>Python模块提供的专门数据类型：<br><font color=red><code>datetime</code>日期和时间类型、<code>collections</code>容器数据类型、<code>array</code>固定类型的数组、<code>heapq</code>堆队列、<code>indeque</code>双端队列、以及<code>enum</code>枚举。</font></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python数据类型介绍&quot;&gt;&lt;a href=&quot;#Python数据类型介绍&quot; class=&quot;headerlink&quot; title=&quot;Python数据类型介绍&quot;&gt;&lt;/a&gt;Python数据类型介绍&lt;/h2&gt;&lt;p&gt;数据类型是为了让计算机能够区分、识别和处理各种数据。每种编程
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础之注释</title>
    <link href="https://blog.xmysql.com/20200602/Python%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E9%87%8A.html"/>
    <id>https://blog.xmysql.com/20200602/Python基础之注释.html</id>
    <published>2020-06-02T07:51:49.000Z</published>
    <updated>2020-06-02T08:17:51.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python基础之注释"><a href="#Python基础之注释" class="headerlink" title="Python基础之注释"></a>Python基础之注释</h2><p>在Python中注释分为单行注释、多行注释和特殊注释。注释便于他人理解你的代码逻辑或函数的功能。<br>Python解释器会读取注释，但会跳过不运行。</p><ul><li><h4 id="特殊注释"><a href="#特殊注释" class="headerlink" title="特殊注释"></a>特殊注释</h4><p>与Python解释器有关。</p><ul><li><p>告诉操作系统在哪个路径下找Python编译器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br></pre></td></tr></table></figure></li><li><p>告诉Python编译器使用哪种字符串编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><h4 id="单行注释（行注释）"><a href="#单行注释（行注释）" class="headerlink" title="单行注释（行注释）"></a>单行注释（行注释）</h4>单个<code>#</code>井号<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 被注释的内容</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="多行注释（块注释）：推荐使用三对双引号的方式"><a href="#多行注释（块注释）：推荐使用三对双引号的方式" class="headerlink" title="多行注释（块注释）：推荐使用三对双引号的方式"></a>多行注释（块注释）：<strong><em>推荐使用三对双引号的方式</em></strong></h4><p>一般用于函数、方法、生成器、类做注释。</p><ul><li>多行注释的两种方式：</li></ul><ol><li><p>三对单引号<code>&#39;&#39;&#39;</code><br>有时使用三对单引号的注释会报错，也不规范。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">被注释的内容</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li><li><p>三对双引号<code>&quot;&quot;&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">被注释的内容</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python基础之注释&quot;&gt;&lt;a href=&quot;#Python基础之注释&quot; class=&quot;headerlink&quot; title=&quot;Python基础之注释&quot;&gt;&lt;/a&gt;Python基础之注释&lt;/h2&gt;&lt;p&gt;在Python中注释分为单行注释、多行注释和特殊注释。注释便于他人理
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础之常量</title>
    <link href="https://blog.xmysql.com/20200602/Python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E9%87%8F.html"/>
    <id>https://blog.xmysql.com/20200602/Python基础之常量.html</id>
    <published>2020-06-02T07:21:56.000Z</published>
    <updated>2020-06-02T07:23:10.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python基础之常量"><a href="#Python基础之常量" class="headerlink" title="Python基础之常量"></a>Python基础之常量</h2><p>在Python中没有一个专门的语法代表常量，但约定俗成用变量名全部大写的变量代表常量。<br>Python中没有真正的常量，为了迎合其他语言的口味，全部大写的变量称之为常量。</p><p>Python的常量必须满足两个条件：</p><ol><li>命名全部为大写</li><li>值一旦被绑定便不可再修改</li></ol><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> pi</span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PI = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><ul><li><p>用自定义类实现常量与使用：<br>引用博客：<a href="https://blog.csdn.net/qq_17034717/article/details/81942059" target="_blank" rel="noopener">https://blog.csdn.net/qq_17034717/article/details/81942059</a></p><ul><li><p>用自定义类实现常量：const.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># python 3.x</span></span><br><span class="line"><span class="comment"># Filename:const.py</span></span><br><span class="line"><span class="comment"># 定义一个常量类实现常量的功能</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 该类定义了一个方法__setattr()__,和一个异常ConstError, ConstError类继承 </span></span><br><span class="line"><span class="comment"># 自类TypeError. 通过调用类自带的字典__dict__, 判断定义的常量是否包含在字典 </span></span><br><span class="line"><span class="comment"># 中。如果字典中包含此变量，将抛出异常，否则，给新创建的常量赋值。 </span></span><br><span class="line"><span class="comment"># 最后两行代码的作用是把const类注册到sys.modules这个全局字典中。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_const</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ConstError</span><span class="params">(TypeError)</span>:</span><span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self,name,value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> self.__dict__:</span><br><span class="line">            <span class="keyword">raise</span> self.ConstError(<span class="string">"Can't rebind const (%s)"</span> %name)</span><br><span class="line">        self.__dict__[name]=value</span><br><span class="line">        </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[__name__]=_const()</span><br></pre></td></tr></table></figure></li><li><p>在项目中引用常量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> const</span><br><span class="line">const.PI=<span class="number">3.14</span></span><br><span class="line">print(const.PI)</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python基础之常量&quot;&gt;&lt;a href=&quot;#Python基础之常量&quot; class=&quot;headerlink&quot; title=&quot;Python基础之常量&quot;&gt;&lt;/a&gt;Python基础之常量&lt;/h2&gt;&lt;p&gt;在Python中没有一个专门的语法代表常量，但约定俗成用变量名全部大
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础之变量</title>
    <link href="https://blog.xmysql.com/20200602/Python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F.html"/>
    <id>https://blog.xmysql.com/20200602/Python基础之变量.html</id>
    <published>2020-06-02T04:25:03.000Z</published>
    <updated>2020-06-02T05:27:15.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python基础之变量"><a href="#Python基础之变量" class="headerlink" title="Python基础之变量"></a>Python基础之变量</h2><p>程序运行时将中间结果保存到内存中（变量），以便后续的代码调用。<br>创建变量时会在内存中开辟一个空间用于存储变量的值。<br>Python解释器会基于变量的数据类型分配内存空间。变量可以指定不同的数据类型，可以存储整数，小数或字符。</p><ul><li><h4 id="变量赋值（变量声明）"><a href="#变量赋值（变量声明）" class="headerlink" title="变量赋值（变量声明）"></a>变量赋值（变量声明）</h4><p>Python中的变量不需要类型声明。<br>每个变量必须在使用前赋值，根据赋值的数据类型来确定变量的数据类型（分配内存空间），所以给变量赋值以后变量才会被创建（变量声明）。<br>通过<code>=</code>等号运算符给变量赋值：</p><ul><li>等号运算符左边是变量名。</li><li>等号运算符右边是变量的值。</li></ul><p>变量赋值示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'Charles'</span></span><br></pre></td></tr></table></figure></li><li><h4 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h4><p>Python允许同时给多个变量赋值。</p><ul><li>多个变量赋值方式一：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">name1 = <span class="string">'Charles'</span></span><br><span class="line">name2 = name</span><br></pre></td></tr></table></figure></li><li>多个变量赋值方式二：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name, age, job = <span class="string">'Charles'</span>, <span class="number">30</span>, <span class="string">'DBA'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h4><ol><li>变量名只能是字母、数字、下划线的任意组合。推荐以字母开头。</li><li>变量的第一个字符不能是数字。</li><li>变量名不能是Python的关键字。<br><font color=red>and、as、assert、break、class、continue、def、del、elif、else、except、exec、finally、for、from、global、if、import、in、is、lambda、not、or、pass、print、raise、return、try、while、with、yield</font></li><li>变量名必须见名知意、不要使用中文、不要使用拼音、不要混合使用英文与拼音、变量名过长。</li></ol><ul><li><p>变量命名方式：推荐下划线</p><ul><li><p>下划线命名法(UnderScoreCase)：（<strong>推荐</strong>）<br>变量名中的每一个逻辑断点都用一个下划线来标记。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_first_name = <span class="string">'Charles'</span></span><br><span class="line">my_last_name = <span class="string">'Yang'</span></span><br></pre></td></tr></table></figure></li><li><p>驼峰命名法(CamelCase)：</p><ul><li><p>小驼峰法：第一个单词以小写字母开始，第二个单词的首字母大写。除第一个单词之外，其他单词首字母大写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myFirstName = <span class="string">'Charles'</span></span><br><span class="line">myLastName = <span class="string">'Yang'</span></span><br></pre></td></tr></table></figure></li><li><p>大驼峰法：<br>即帕斯卡命名法，每一个单词的首字母都采用大写字母。常用于类名，属性，命名空间等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyFirstName</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyLastName</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python基础之变量&quot;&gt;&lt;a href=&quot;#Python基础之变量&quot; class=&quot;headerlink&quot; title=&quot;Python基础之变量&quot;&gt;&lt;/a&gt;Python基础之变量&lt;/h2&gt;&lt;p&gt;程序运行时将中间结果保存到内存中（变量），以便后续的代码调用。&lt;br
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python介绍</title>
    <link href="https://blog.xmysql.com/20200602/Python%E4%BB%8B%E7%BB%8D.html"/>
    <id>https://blog.xmysql.com/20200602/Python介绍.html</id>
    <published>2020-06-02T02:30:39.000Z</published>
    <updated>2020-06-02T02:37:53.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python介绍"><a href="#Python介绍" class="headerlink" title="Python介绍"></a>Python介绍</h2><ul><li><h4 id="Python的诞生"><a href="#Python的诞生" class="headerlink" title="Python的诞生"></a>Python的诞生</h4><p>Python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范罗苏姆（中文名字：龟叔）为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。<br>龟叔：2005年加入谷歌至2012年，2013年加入Dropbox直到现在，依然掌握着Python发展的核心方向，被称为仁慈的独裁者。</p><p>Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。</p></li></ul><p>TIOBE排行榜<br>  2017年7月Python已经占据第四的位置。<br>  2020年5月Python已经占据第三的位置。<br>  <img src="http://cdn.xnginx.com/pyimage/d01_TIOBEIndexforMay2020.png" alt="d01_TIOBEIndexforMay2020"></p><ul><li><h5 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h5>Python可以应用于众多领域，如：数据分析、组件集成、网络服务、图像处理、数值计算和科学计算等众多领域。<br>目前业内几乎所有大中型互联网企业都在使用Python，如：Youtube、Dropbox、BT、Quora（中国知乎）、豆瓣、知乎、Google、Yahoo!、Facebook、NASA、百度、腾讯、汽车之家、美团等。<ul><li>目前Python主要应用领域：<ul><li>云计算：云计算最火的语言， 典型应用OpenStackWEB</li><li>开发：众多优秀的WEB框架，众多大型网站均为Python开发，Youtube, Dropbox, 豆瓣……， 典型WEB框架有Django。</li><li>科学运算、人工智能: 典型库NumPy, SciPy, Matplotlib, Enthought librarys,pandas。</li><li>系统运维：运维人员必备语言。</li><li>金融：量化交易，金融分析，在金融工程领域，Python不但在用，且用的最多，而且重要性逐年提高。原因：作为动态语言的Python，语言结构清晰简单，库丰富，成熟稳定，科学计算和统计分析都很牛逼，生产效率远远高于c,c++,java,尤其擅长策略回测。图形</li><li>GUI：PyQT, WxPython,TkInter。</li></ul></li></ul></li></ul><ul><li><h4 id="Python发展史"><a href="#Python发展史" class="headerlink" title="Python发展史"></a>Python发展史</h4><p>1989年，为了打发圣诞节假期，Guido开始写Python语言的编译器。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。<br>1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。<br>Granddaddy of Python web frameworks, Zope 1 was released in 1999<br>Python 1.0 - January 1994 增加了 lambda, map, filter and reduce.<br>Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础<br>Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生<br>Python 2.5 - September 19, 2006<br>Python 2.6 - October 1, 2008<br>Python 2.7 - July 3, 2010<br>In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible<br>Python 3.0 - December 3, 2008<br>Python 3.1 - June 27, 2009<br>Python 3.2 - February 20, 2011<br>Python 3.3 - September 29, 2012<br>Python 3.4 - March 16, 2014<br>Python 3.5 - September 13, 2015<br>Python 3.6 - December 16,2016</p></li><li><h4 id="Python是什么编程语言"><a href="#Python是什么编程语言" class="headerlink" title="Python是什么编程语言"></a>Python是什么编程语言</h4><p>Python是一门动态解释性的强类型定义语言。</p><ul><li>解释型语言<br>只在执行程序时,才一条一条的解释成机器语言给计算机来执行。<br>优点：有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）。灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。<br>缺点：每次运行的时候都要解释一遍，性能上不如编译型语言。</li><li>动态类型语言：<br>动态类型语言是指在运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，永远也不用给任何变量指定数据类型，该语言会在你第一次赋值给变量时，在内部将数据类型记录下来。Python和Ruby就是一种典型的动态类型语言，其他的各种脚本语言如VBScript也多少属于动态类型语言。</li><li>强类型定义语言：<br>强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。</li></ul></li><li><h4 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h4><ul><li>优点：<ul><li>Python的定位是“优雅”、“明确”、“简单”，所以Python程序看上去总是简单易懂，初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。</li><li>开发效率非常高，Python有非常强大的第三方库，基本上你想通过计算机实现任何功能，Python官方库里都有相应的模块进行支持，直接下载调用后，在基础库的基础上再进行开发，大大降低开发周期，避免重复造轮子。</li><li>高级语言：当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节。</li><li>可移植性：由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工 作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就几乎可以在市场上所有的系统平台上运行。</li><li>可扩展性：如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。</li><li>可嵌入性：你可以把Python嵌入你的C/C++程序，从而向你的程序用户提供脚本功能。</li></ul></li><li>缺点：<ul><li>速度慢。Python的运行速度相比C语言确实慢很多，跟JAVA相比也要慢一些，因此这也是很多所谓的大牛不屑于使用Python的主要原因，但其实这里所指的运行速度慢在大多数情况下用户是无法直接感知到的，必须借助测试工具才能体现出来，比如你用C运一个程序花了0.01s，用Python是0.1s，这样C语言直接比Python快了10倍，算是非常夸张了，但是你是无法直接通过肉眼感知的，因为一个正常人所能感知的时间最小单位是0.15-0.4s左右，哈哈。其实在大多数情况下Python已经完全可以满足你对程序速度的要求，除非你要写对速度要求极高的搜索引擎等，这种情况下，当然还是建议你用C去实现的。</li><li>代码不能加密，因为Python是解释性语言，它的源码都是以名文形式存放的，不过我不认为这算是一个缺点，如果你的项目要求源代码必须是加密的，那你一开始就不应该用Python来去实现。</li><li>线程不能利用多CPU问题，这是Python被人诟病最多的一个缺点，GIL即全局解释器锁（Global Interpreter Lock），是计算机程序设计语言解释器用于同步线程的工具，使得任何时刻仅有一个线程在执行，Python的线程是操作系统的原生线程。在Linux上为pthread，在Windows上为Win thread，完全由操作系统调度线程的执行。一个Python解释器进程内有一条主线程，以及多条用户程序的执行线程。即使在多核CPU平台上，由于GIL的存在，所以禁止多线程的并行执行。关于这个问题的折衷解决方法，我们在以后线程和进程章节里再进行详细探讨。</li></ul></li></ul></li><li><h4 id="Python的种类（解释器）"><a href="#Python的种类（解释器）" class="headerlink" title="Python的种类（解释器）"></a>Python的种类（解释器）</h4><ul><li>CPython (C Python)<br>官方的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。CPython是使用最广的Python解释器。</li><li>IPython (In Python)<br>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。</li><li>PyPy<br>PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。</li><li>Jython<br>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</li><li>IronPython<br>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。<br>小结：Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。</li><li>Python统一的代码<br><img src="http://cdn.xnginx.com/pyimage/d01_Python%E7%BB%9F%E4%B8%80%E7%9A%84%E4%BB%A3%E7%A0%81.jpg" alt="d01_Python统一的代码"></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python介绍&quot;&gt;&lt;a href=&quot;#Python介绍&quot; class=&quot;headerlink&quot; title=&quot;Python介绍&quot;&gt;&lt;/a&gt;Python介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;Python的诞生&quot;&gt;&lt;a href=&quot;#Python的诞生&quot; 
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础之Python解释器安装</title>
    <link href="https://blog.xmysql.com/20200529/Python%E5%9F%BA%E7%A1%80%E4%B9%8BPython%E8%A7%A3%E9%87%8A%E5%99%A8%E5%AE%89%E8%A3%85.html"/>
    <id>https://blog.xmysql.com/20200529/Python基础之Python解释器安装.html</id>
    <published>2020-05-29T08:10:44.000Z</published>
    <updated>2020-06-02T01:05:54.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python基础之Python解释器安装-Windows"><a href="#Python基础之Python解释器安装-Windows" class="headerlink" title="Python基础之Python解释器安装(Windows)"></a>Python基础之Python解释器安装(Windows)</h2><p>Python官网：<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></p><p>版本选择：<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">https://www.python.org/downloads/windows/</a><br>Python 3.6.8 - Dec. 24, 2018<br>python-3.6.8-amd64.exe Download Windows x86-64 executable installer</p><p>Download URL：<a href="https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe</a></p><ul><li><p>添加环境变量<br> <img src="http://cdn.xnginx.com/pyimage/d01_Install_Python_01.png" alt="d01_Install_Python_01"></p></li><li><p>自定义安装<br> <img src="http://cdn.xnginx.com/pyimage/d01_Install_Python_02.png" alt="d01_Install_Python_02"></p></li><li><p>选择安装Python文档<br> <img src="http://cdn.xnginx.com/pyimage/d01_Install_Python_03.png" alt="d01_Install_Python_03"></p></li><li><p>自定义安装路径<br> <img src="http://cdn.xnginx.com/pyimage/d01_Install_Python_04.png" alt="d01_Install_Python_04"></p></li><li><p>安装完成<br> <img src="http://cdn.xnginx.com/pyimage/d01_Install_Python_05.png" alt="d01_Install_Python_05"></p></li><li><p>手动添加环境变量</p><ul><li><strong>用户变量</strong><ul><li>添加Python 3.6.8的python.exe路径与Scripts脚本路径</li><li>添加Python 2.7.16的python.exe路径与Scripts脚本路径<br><img src="http://cdn.xnginx.com/pyimage/d01_Install_Python_06.png" alt="d01_Install_Python_06"></li></ul></li><li><strong>系统变量</strong><ul><li>添加Python 3.6.8的python.exe路径与Scripts脚本路径</li><li>添加Python 2.7.16的python.exe路径与Scripts脚本路径<br><img src="http://cdn.xnginx.com/pyimage/d01_Install_Python_07.png" alt="d01_Install_Python_07"></li></ul></li></ul></li><li><p>命令行验证安装是否成功<br> <img src="http://cdn.xnginx.com/pyimage/d01_Install_Python_08.png" alt="d01_Install_Python_08"></p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\charl&gt;python</span><br><span class="line">Python <span class="number">3.6</span>.<span class="number">8</span> (tags/v3.<span class="number">6.8</span>:<span class="number">3</span>c6b436a57, Dec <span class="number">24</span> <span class="number">2018</span>, <span class="number">00</span>:<span class="number">16</span>:<span class="number">47</span>) [MSC v.<span class="number">1916</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure></li><li><p>运行第一个Python代码<br> C:\pycode\hello_world.py</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello World!'</span>)</span><br></pre></td></tr></table></figure><p> <img src="http://cdn.xnginx.com/pyimage/d01_Install_Python_09.png" alt="d01_Install_Python_09"></p><p> cmd</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\charl&gt;cd c:\pycode</span><br><span class="line"></span><br><span class="line">c:\pycode&gt;python hello_world.py</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p> <img src="http://cdn.xnginx.com/pyimage/d01_Install_Python_10.png" alt="d01_Install_Python_10"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python基础之Python解释器安装-Windows&quot;&gt;&lt;a href=&quot;#Python基础之Python解释器安装-Windows&quot; class=&quot;headerlink&quot; title=&quot;Python基础之Python解释器安装(Windows)&quot;&gt;&lt;/a&gt;P
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python的框架</title>
    <link href="https://blog.xmysql.com/20200529/Python%E7%9A%84%E6%A1%86%E6%9E%B6.html"/>
    <id>https://blog.xmysql.com/20200529/Python的框架.html</id>
    <published>2020-05-29T08:09:28.000Z</published>
    <updated>2020-06-02T01:51:27.842Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Python的框架"><a href="#Python的框架" class="headerlink" title="Python的框架"></a>Python的框架</h2><ul><li><h4 id="Web应用开发框架"><a href="#Web应用开发框架" class="headerlink" title="Web应用开发框架"></a><strong>Web应用开发框架</strong></h4><ul><li><p>Django（企业级）<br>Python最出名的Web应用开发框架。Django最出名的是其全自动化的管理后台：只需要使用起ORM，做简单的对象定义，它就能自动生成数据库结构、以及全功能的管理后台。</p><ul><li><strong>优点：</strong><ul><li>开源框架，有完美的文档支持</li><li>解决方案众多，内部功能支持较多</li><li>优雅的URL，完整的路由系统</li><li>自助式的后台管理</li></ul></li><li><strong>缺点：</strong><ul><li>系统紧耦合，想用喜欢的第三方库来代替是非常难的，即使打了一些补丁用上了也会觉得非常别扭。</li><li>Django自带的ORM远不如SQLAlchemy强大。</li><li>Template功能比较弱，不能插入Python代码，要写复杂一点的逻辑需要另外用Python实现 Tag或Filter。</li></ul></li></ul></li><li><p>Flask（轻量级–快速建站）<br>Flask是一个使用Python编写的轻量级Web应用框架。基于Werkzeug WSGI工具箱和Jinja2<br>模板引擎。Flask也被称为“microframework”，因为它使用简单的核心，用extension增加其他功能。Flask没有默认使用的数据库、窗体验证工具。</p><ul><li><strong>优点：</strong>Flask比Django更灵活，用Flask来构建应用之前，选择组件的时候会给开发者带来更多的灵活性 ，可能有的应用场景不适合使用一个标准的ORM(Object-Relational Mapping对象关联映射)，或者需要与不同的工作流和模板系统交互。</li><li><strong>缺点：</strong>Flask只是一个内核，默认依赖于两个外部库：Jinja2 模板引擎和 Werkzeug WSGI 工具集，其他很多功能都是以扩展的形式进行嵌入使用。</li></ul></li><li><p>Tornado（高并发处理）<br>Tornado的全称是Torado Web Server，它也是一个异步非阻塞IO的Web开发框架。最初是在FriendFeed公司的网站上使用，FaceBook收购了之后便开源了出来。</p><ul><li><strong>优点：</strong>Tornado擅长为需要严密控制异步网络细节的应用程序提供基础架构。例如，Tornado不仅提供内置的异步HTTP服务器，还提供异步HTTP客户端。因此，Tornado非常适合构建应用程序，例如Web scraper或bot，它们并行查询其他站点并对返回的数据进行操作。</li><li><strong>缺点：</strong><br>模板和数据库部分有很多第三方的模块可供选择，这样不利于封装为一个功能模块。</li></ul></li><li><p>Web2py（全功能）<br>Web2py是一个为Python语言提供的全功能（全栈式）Web应用框架，旨在敏捷快速的开发Web应用，具有快速、安全以及可移植的数据库驱动的应用，兼容Google App Engine。</p><ul><li><strong>优点：</strong>Web2py最大的吸引力在于其内置的开发环境。当设置Web2py实例时，将获得一个Web界面，实际上是一个在线Python应用程序编辑器，可以在其中配置应用程序的组件。这通常意味着创建模型，视图和控制器，每个都通过Python模块或HTML模板进行描述。</li><li><strong>缺点：</strong>Web2py的一个重要限制是它仅与Python 2.x兼容。首先这意味着Web2py无法使用Python 3的异步语法。如果你依赖于Python3独有的外部库，那么你就不走运了。但是，正在开展使Web2py Python3兼容的工作，并且在撰写本文时它已接近完成。</li></ul></li><li><p>webpy（轻量级）<br>webpy的设计理念力求精简（Keep it simple and powerful），源码很简短，只提供一个框架所必须的东西，不依赖大量的第三方模块，它没有URL路由、没有模板也没有数据库的访问。</p><ul><li><strong>优点：</strong>Weppy的文档与框架本身具有相同的风格。它干净，可读，并且被人类消费。除了通常的“hello world”应用程序示例之外，它还包含一个很好的演练教程，可以让你创建一个微博系统作为初学者项目。</li><li><strong>缺点：</strong>虽然Weppy有一个扩展机制，但官方批准的附加组件列表很小，远小于Flask的扩展目录。   </li></ul></li><li><p>Bottle（微框架）<br>Bottle可以被认为是一种迷你烧瓶，因为它比其他“微框架”更加紧凑和简洁。由于其占地面积最小，Bottle非常适合包含在其他项目中或快速交付REST API等小型项目。<br>Bottle是一个简单高效的遵循WSGI的微型python Web框架。说微型，是因为它只有一个文件，除Python标准库外，它不依赖于任何第三方模块。</p><ul><li><strong>优点：</strong>Bottle不需要像其他框架那样多的文档，但文档绝不是吝啬。所有关键的东西都适合单个（尽管很长）的网页。除此之外，还可以找到每个API的完整文档，如何在各种基础架构上进行部署的示例，内置模板语言的解释以及一系列常见配方。</li><li><strong>缺点：</strong>Bottle极简主义的一个后果是有些功能根本就不存在。不支持表单验证，包括CSRF保护等功能。如果要构建支持高度用户交互的Web应用程序，则需要自己添加它们。</li></ul></li></ul></li></ul><ul><li><h4 id="网络通信与事件驱动并发框架"><a href="#网络通信与事件驱动并发框架" class="headerlink" title="网络通信与事件驱动并发框架"></a><strong>网络通信与事件驱动并发框架</strong></h4><ul><li><p>Diesel<br>基于Greenlet的事件I/O框架，提供一个整洁的API来编写网络客户端和服务器。支持TCP和UDP。</p></li><li><p>Falcon<br>Falcon是一个构建云API和网络应用后端的高性能Python框架，它鼓励使用REST架构风格，尽可能以最少的力气做最多的事情。</p></li><li><p>Twisted（底层自定义协议网络）<br>Twisted是一个用Python语言编写的事件驱动的网络框架，对于追求服务器程序性能的应用，Twisted框架是一个很好的选择。</p></li><li><p>Pulsar<br>Pulsar是一个事件驱动的并发框架，有了pulsar，你可以写出在不同进程或线程中运行一个或多个活动的异步服务器。</p></li></ul></li></ul><ul><li><h4 id="爬虫框架"><a href="#爬虫框架" class="headerlink" title="爬虫框架"></a><strong>爬虫框架</strong></h4><ul><li>Scrapy<br>Scrapy是一个使用Python编写的爬虫框架，轻量级的，简单轻巧，并且使用起来非常的方便。<ul><li><strong>优点：</strong><ul><li>Scrapy是一个功能非常强大的爬虫框架，它不仅能便捷地构建request，还有强大的selector能够方便地解析response，然而它最受欢迎的还是它的性能，既抓取和解析的速度，它的downloader是多线程的，request是异步调度和处理的。这两点使它的爬取速度非常之快。</li><li>另外还有内置的logging，exception，shell等模块，为爬取工作带来了很多便利。</li></ul></li><li><strong>缺点：</strong>scrapy是封装起来的框架，他包含了下载器，解析器，日志及异常处理，基于多线程， twisted的方式处理，对于固定单个网站的爬取开发，有优势，但是对于多网站爬取100个网站，并发及分布式处理方面，不够灵活，不便调整与括展。   </li></ul></li></ul></li></ul><ul><li><h4 id="分布式RPC框架"><a href="#分布式RPC框架" class="headerlink" title="分布式RPC框架"></a><strong>分布式RPC框架</strong></h4><ul><li>Zerorpc（高性能）<br>Zerorpc是一个基于ZeroMQ和MessagePack开发的远程过程调用协议（RPC）实现的高性能分布式RPC框架。和Zerorpc一起使用的Service API被称为zeroservice。Zerorpc可以通过编程或命令行方式调用。</li></ul></li></ul><ul><li><h4 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a><strong>测试框架</strong></h4><ul><li>Buildbot<br>Buildbot是一个持续集成测试开源框架，可以自动化软件构建、测试和发布等过程。每当代码有改变，服务器要求不同平台上的客户端立即进行代码构建和测试，收集并报告不同平台的构建和测试结果。</li></ul></li></ul><ul><li><h4 id="分布式计算框架"><a href="#分布式计算框架" class="headerlink" title="分布式计算框架"></a><strong>分布式计算框架</strong></h4><ul><li>Dpark<br>DPark是Spark的Python克隆（Python版的Spark），是一个Python实现的分布式计算框架，可以非常方便地实现大规模数据处理和迭代计算。DPark由豆瓣实现，目前豆瓣内部的绝大多数数据分析都使用DPark完成，正日趋完善。</li></ul></li></ul><ul><li><h4 id="OLAP框架"><a href="#OLAP框架" class="headerlink" title="OLAP框架"></a><strong>OLAP框架</strong></h4><ul><li>Cubes（轻量级）<br>Cubes是一个轻量级的OLAP框架，包含OLAP、多维数据分析和浏览聚合数据（aggregated data）等工具。</li></ul></li></ul><ul><li><h4 id="矢量地图框架"><a href="#矢量地图框架" class="headerlink" title="矢量地图框架"></a><strong>矢量地图框架</strong></h4><ul><li>Kartograph.py<br>Kartograph是一个创造矢量地图的轻量级Python框架，它是一个Python库，用来为ESRI生成SVG地图。Kartograph.py目前仍处于beta阶段，你可以在virtualenv环境下来测试。</li></ul></li></ul><p>Python的框架图<br><img src="http://cdn.xnginx.com/pyimage/Python%E7%9A%84%E6%A1%86%E6%9E%B6_MindMap.png" alt="Python的框架_MindMap"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;Python的框架&quot;&gt;&lt;a href=&quot;#Python的框架&quot; class=&quot;headerlink&quot; title=&quot;Python的框架&quot;&gt;&lt;/a&gt;Python的框架&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;Web应用开发框架
      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PicGo配置七牛图床</title>
    <link href="https://blog.xmysql.com/20200529/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A.html"/>
    <id>https://blog.xmysql.com/20200529/PicGo配置七牛图床.html</id>
    <published>2020-05-29T08:01:40.000Z</published>
    <updated>2020-05-29T08:16:29.953Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="PicGo配置七牛图床"><a href="#PicGo配置七牛图床" class="headerlink" title="PicGo配置七牛图床"></a>PicGo配置七牛图床</h2><ul><li><p>PicGo官网：<a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">https://molunerfinn.com/PicGo/</a></p><ul><li>下载地址：<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/picgo/releases</a></li><li>版本：PicGo-Setup-2.3.0-beta.0.exe</li></ul></li></ul><ul><li><p>七牛图床配置：</p><p><img src="http://cdn.xnginx.com/pyimage/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A_img01.png" alt=""></p><ul><li><p>AccessKey：七牛云的接入公钥。</p></li><li><p>SecretKey：七牛云的自己的私钥。</p></li><li><p>存储空间名：七牛云上设置的存储空间名。</p></li><li><p>访问地址：七牛云上空间的外链访问地址。</p></li><li><p>存储区域：创建空间时，选择的存储区域，从z0到z1，依次对应：华东、华北、华南、北美、东南亚。</p></li></ul></li></ul><ul><li><p>AccessKey与SecretKey</p><p><img src="http://cdn.xnginx.com/pyimage/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A_img02.png" alt=""></p></li></ul><ul><li><p>存储空间名：七牛云上设置的存储空间名。</p><p><img src="http://cdn.xnginx.com/pyimage/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A_img03.png" alt=""></p></li></ul><ul><li><p>访问地址：七牛云上空间的外链访问地址。</p><p><img src="http://cdn.xnginx.com/pyimage/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A_img04-1590734444028.png" alt=""></p></li></ul><pre><code>![](http://cdn.xnginx.com/pyimage/PicGo配置七牛图床_img05.png)</code></pre><ul><li><p>存储区域：创建空间时，选择的存储区域，从z0到z1，依次对应：华东、华北、华南、北美、东南亚。</p><p><img src="http://cdn.xnginx.com/pyimage/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A_img06.png" alt=""></p></li></ul><ul><li><p>上传图片</p><p><img src="http://cdn.xnginx.com/pyimage/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A_img07.png" alt=""></p></li></ul><p>  <img src="http://cdn.xnginx.com/pyimage/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A_img08.png" alt=""></p><p>  <img src="http://cdn.xnginx.com/pyimage/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A_img09.png" alt=""></p><ul><li><p>验证图片上否上传成功</p><p><img src="http://cdn.xnginx.com/pyimage/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A_img10.png" alt=""></p></li></ul><p>  根据“外链域名”+“七牛图床设置指定的存储路径”+“图片名称”在浏览器中是否能正常访问上传的图片。</p><p>  比如：<a href="http://cdn.xxx.com/pyimage/Change_Buffer_img01.png" target="_blank" rel="noopener">http://cdn.xxx.com/pyimage/Change_Buffer_img01.png</a></p><p>  <img src="http://cdn.xnginx.com/pyimage/PicGo%E9%85%8D%E7%BD%AE%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A_img11.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;PicGo配置七牛图床&quot;&gt;&lt;a href=&quot;#PicGo配置七牛图床&quot; class=&quot;headerlink&quot; title=&quot;PicGo配置七牛图床&quot;&gt;&lt;/a&gt;PicGo配置七牛图床&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PicGo官
      
    
    </summary>
    
    
      <category term="other" scheme="https://blog.xmysql.com/categories/other/"/>
    
    
      <category term="other" scheme="https://blog.xmysql.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>python1</title>
    <link href="https://blog.xmysql.com/20191022/python1.html"/>
    <id>https://blog.xmysql.com/20191022/python1.html</id>
    <published>2019-10-22T07:08:24.000Z</published>
    <updated>2019-10-22T07:09:21.197Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python</title>
    <link href="https://blog.xmysql.com/20191022/python.html"/>
    <id>https://blog.xmysql.com/20191022/python.html</id>
    <published>2019-10-22T07:08:21.000Z</published>
    <updated>2019-10-22T07:09:08.029Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="python" scheme="https://blog.xmysql.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.xmysql.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>mongodb1</title>
    <link href="https://blog.xmysql.com/20191022/mongodb1.html"/>
    <id>https://blog.xmysql.com/20191022/mongodb1.html</id>
    <published>2019-10-22T06:08:02.000Z</published>
    <updated>2019-10-22T06:08:39.763Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="mongodb" scheme="https://blog.xmysql.com/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="https://blog.xmysql.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>redis1</title>
    <link href="https://blog.xmysql.com/20191022/redis1.html"/>
    <id>https://blog.xmysql.com/20191022/redis1.html</id>
    <published>2019-10-22T06:07:19.000Z</published>
    <updated>2019-10-22T06:07:50.579Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="redis" scheme="https://blog.xmysql.com/categories/redis/"/>
    
    
      <category term="redis" scheme="https://blog.xmysql.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>oracle1</title>
    <link href="https://blog.xmysql.com/20191022/oracle1.html"/>
    <id>https://blog.xmysql.com/20191022/oracle1.html</id>
    <published>2019-10-22T06:06:35.000Z</published>
    <updated>2019-10-22T06:07:11.723Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="oracle" scheme="https://blog.xmysql.com/categories/oracle/"/>
    
    
      <category term="oracle" scheme="https://blog.xmysql.com/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>mysql1</title>
    <link href="https://blog.xmysql.com/20191022/mysql1.html"/>
    <id>https://blog.xmysql.com/20191022/mysql1.html</id>
    <published>2019-10-22T06:05:31.000Z</published>
    <updated>2019-10-22T06:06:09.222Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="mysql" scheme="https://blog.xmysql.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://blog.xmysql.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mongodb</title>
    <link href="https://blog.xmysql.com/20191022/mongodb.html"/>
    <id>https://blog.xmysql.com/20191022/mongodb.html</id>
    <published>2019-10-22T05:52:55.000Z</published>
    <updated>2019-10-22T05:53:40.425Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="mongodb" scheme="https://blog.xmysql.com/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="https://blog.xmysql.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://blog.xmysql.com/20191022/redis.html"/>
    <id>https://blog.xmysql.com/20191022/redis.html</id>
    <published>2019-10-22T05:52:28.000Z</published>
    <updated>2019-10-22T05:53:08.325Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="redis" scheme="https://blog.xmysql.com/categories/redis/"/>
    
    
      <category term="redis" scheme="https://blog.xmysql.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>oracle</title>
    <link href="https://blog.xmysql.com/20191022/oracle.html"/>
    <id>https://blog.xmysql.com/20191022/oracle.html</id>
    <published>2019-10-22T02:26:43.000Z</published>
    <updated>2019-10-22T05:51:55.880Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="oracle" scheme="https://blog.xmysql.com/categories/oracle/"/>
    
    
      <category term="oracle" scheme="https://blog.xmysql.com/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="https://blog.xmysql.com/20191022/mysql.html"/>
    <id>https://blog.xmysql.com/20191022/mysql.html</id>
    <published>2019-10-22T02:26:33.000Z</published>
    <updated>2019-10-22T05:51:36.532Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="mysql" scheme="https://blog.xmysql.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://blog.xmysql.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>xmysql</title>
    <link href="https://blog.xmysql.com/20191021/xmysql.html"/>
    <id>https://blog.xmysql.com/20191021/xmysql.html</id>
    <published>2019-10-21T08:14:49.000Z</published>
    <updated>2019-10-21T08:16:13.037Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="xmysql" scheme="https://blog.xmysql.com/tags/xmysql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.xmysql.com/20191021/hello-world.html"/>
    <id>https://blog.xmysql.com/20191021/hello-world.html</id>
    <published>2019-10-21T07:48:59.185Z</published>
    <updated>2019-10-21T07:48:59.185Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
